//__________________________________________________________//
//____________________BUILDSCRIPT AREA _____________________//
// Putting items in the buildscript closure ensures that the
// dependencies are available for use within the gradle build
// itself. Not the output program.
buildscript {
	ext {
		springBootVersion = "1.4.1.RELEASE"
	}
	repositories {
		maven { url "https://plugins.gradle.org/m2/" }
		mavenCentral()
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.1-rc3")
	}
}
}

//__________________________________________________________//
//____________________PLUGIN AREA __________________________//
plugins {
	id "java"
	id "groovy"
	id "eclipse"
	id "org.sonarqube" version "2.1-rc3"
	id 'org.detoeuf.swagger-codegen' version '1.6.3'
}

apply plugin: "spring-boot"
apply plugin: 'groovy'



//__________________________________________________________//
//_____________ JAVA PLUGIN CONFIG AREA ___________________//
sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava {
  dependsOn "autoCodeGen"
}


//__________________________________________________________//
//_______________JAR CONGIURATION___________________________//
//
jar {
	archiveName = "taxation.jar"
}

//__________________________________________________________//
//____________SWAGGER CODEGEN AREA _______________________//

def swaggerDir          = "${buildDir}/swagger";
def basePackagePath  = "src/main/java/com/sample/taxation";
def basePackage       = "com.sample.taxation";

swagger {
  inputSpec = "${rootDir}/src/specs/dist/taxation.yaml"

  output = swaggerDir
  language = 'spring'
  cleanOutputDir = false
  
  additionalProperties = [
		  "basePackage"  : basePackage,
		  "configPackage": basePackage + '.config',
		  "modelPackage": basePackage + '.payload',
		  "apiPackage"     : basePackage + '.controller.api',
		  "dateLibrary":"java8"
  ]
  apis = ''
  models = ''
  
}


task autoCodeGen() {
	  dependsOn("swagger")

	  // Find all files under payload dir that already exist in domain dir
	  def domainFiles    =  fileTree( "${rootDir}/${basePackagePath}/domain").include('*.java').getFiles().collect{ file -> file.getName()   }
	  def domainNames = domainFiles.collect{ fileName ->   fileName[0..-6] }

	  doLast{
		   // copy payload classes generated by swagger
		   copy {
			 from "${swaggerDir}/${basePackagePath}/payload"
			 into  "${rootDir}/${basePackagePath}/payload"
			 exclude domainFiles
			 filter{  line ->

			   
			   if(!line.startsWith("import")){
				 return line


			   }
			   
			   for(def token : domainNames){
				 if(line.endsWith(token + ";")){
				   return line.replaceAll(basePackage + '.payload.' + token + ';', basePackage + '.domain.' + token  + ';')


				 }
			   }
			   return line
			
			}
		   }
		   
		   // copy api classes generated by swagger
		   copy {
			 from "${swaggerDir}/${basePackagePath}/controller/api"
			 into  "${rootDir}/${basePackagePath}/controller/api"
			 include '*Api.java'
			 filter{  line ->
			   if(!line.startsWith("import")){
				 return line


			   }
			   
			   for(def token : domainNames){
				 if(line.endsWith(token + ";")){
				   return line.replaceAll(basePackage + '.payload.' + token + ';', basePackage + '.domain.' + token  + ';')


				 }
			   }
			   return line
			 }
		  }
	 }

}

//__________________________________________________________//
//_______________SOURCESETS AREA ___________________________//
sourceSets {
	unitTest {
		java {
			srcDir 'src/test/groovy'
		}
		resources {
			srcDir 'src/test/resources'
		}
		compileClasspath += sourceSets.main.runtimeClasspath
	}
	
}

//__________________________________________________________//
//_____________ WRAPPER TASK CONFIG AREA ___________________//
task wrapper(type: Wrapper) {
	gradleVersion = "2.13" 
}

//__________________________________________________________//
//_____________ TEST CONFIG SETTINGS AREA __________________//
test {
	reports {
		junitXml.enabled = true
		html.enabled = true
	}
	testLogging {
		// Show that tests are run in the command-line output
		events 'passed' // 'started' is also an option
	}
}

//Ensure that the HTML reports of unit and integration tests are written to different directories.
tasks.withType(Test) {
	reports.html.destination = file("${reporting.baseDir}/${name}")
}

//__________________________________________________________//
//_____________ SONAR PLUGIN CONFIG AREA ___________________//
sonarqube {
	properties {
     //   property "sonar.projectName", "taxation"
        property "sonar.projectKey", "com.sample:taxation"
		property "sonar.host.url", "http://localhost:9090"
		property "sonar.login", "admin"
		property "sonar.password", "admin"
        property "sonar.test.exclusions", "**/generated-test-sources/**"
		// exclude files generated from swagger
		property "sonar.exclusions",  "src/main/java/com/sample/taxation/payload/*," +
         "src/main/java/com/sample/controller/api/*,"+         
		  "**/taxation/Application.java"
	}
}


//__________________________________________________________//
//_____________ SHORTHAND UNIT_TEST TASK _________________//
// Task builds and runs all unit tests from "ut" target
// eg. "gradle ut"
task ut(dependsOn: ['clean', 'test']) {
}


//__________________________________________________________//
//____________________DEPENDENCIES AREA ____________________//
dependencies {

	compile(
		'org.springframework.boot:spring-boot-starter-web',		
			'io.swagger:swagger-annotations:1.5.10'
	)

	testCompile(
			'org.springframework.boot:spring-boot-starter-test',        // needed for spring
			'junit:junit:4.12',                                         // needed for Spock UnitTests
			'org.codehaus.groovy:groovy-all:2.4.7',                     // needed for Spock UnitTests
			'org.spockframework:spock-core:1.0-groovy-2.4'             // needed for Spock UnitTests
	)

	testRuntime(
			'com.h2database:h2:1.4.182'
	)
	

//__________________________________________________________//
//______________ REPOSITORY AREA ___________________________//
	repositories {
		maven { url "https://plugins.gradle.org/m2/" }
	}


}